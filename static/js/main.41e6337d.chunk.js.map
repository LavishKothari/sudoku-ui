{"version":3,"sources":["components/Square.jsx","components/House.jsx","components/Board.jsx","serviceWorker.js","index.js"],"names":["Square","value","this","props","cellValue","react_default","a","createElement","className","React","Component","House","rows","i","currentRow","j","push","Square_Square","houseValues","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","bind","assertThisInitialized","state","loading","unfilledSudoku","solvedSudoku","axios","get","then","response","data","grid","cachedSolvedGrid","_this2","setState","catch","error","console","log","House_House","dim","getHouseValues","onClick","innerGridNumber","Y","startXIndex","Math","floor","startYIndex","resultList","Boolean","window","location","hostname","match","ReactDOM","render","Board_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAGqBA,0LAEb,IAAMC,EAAiC,IAAzBC,KAAKC,MAAMC,UAAkB,GAAKF,KAAKC,MAAMC,UAC3D,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACbP,UALmBQ,IAAMC,YCArBC,mLAGb,IADA,IAAIC,EAAO,GACHC,EAAE,EAAEA,EAAE,EAAEA,IAAK,CAEjB,IADA,IAAIC,EAAa,GACTC,EAAE,EAAEA,EAAE,EAAEA,IACZD,EAAWE,KAAKX,EAAAC,EAAAC,cAACU,EAAD,CAAQb,UAAWF,KAAKC,MAAMe,YAAc,EAAFL,EAAIE,MAElEH,EAAKI,KAAKX,EAAAC,EAAAC,cAAA,WAAMO,IAEpB,OAAQF,SAVmBH,IAAMC,4BCCpBS,cAqBjB,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KACDuB,QAAUN,EAAKM,QAAQC,KAAbN,OAAAO,EAAA,EAAAP,CAAAD,IACfA,EAAKM,UACLN,EAAKS,MAAQ,CACTC,SAAS,EACTC,eAAgB,CAAC,IACjBC,aAAc,CAAC,KAPJZ,gMAjBfa,IAAMC,IAAI,gCACLC,KAAK,SAACC,GACHL,EAAiBK,EAASC,KAAKC,KAC/BN,EAAeI,EAASC,KAAKE,iBAC7BC,EAAKC,SACD,CACIX,SAAS,EACTC,eAAgBA,EAChBC,aAAcA,MAIzBU,MAAO,SAACC,GACLC,QAAQC,IAAIF,oJAgBpB,GAAGzC,KAAK2B,MAAMC,QACV,MAAO,WAGX,IADA,IAAIlB,EAAO,GACHC,EAAE,EAAEA,EAAE,EAAEA,IAAK,CAEjB,IADA,IAAIC,EAAa,GACTC,EAAE,EAAEA,EAAE,EAAEA,IACZD,EAAWE,KACPX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACuC,EAAD,CAAOC,IAAK,EAAG7B,YAAahB,KAAK8C,eAAiB,EAAFnC,EAAIE,EAAG,OAInEH,EAAKI,KAAKX,EAAAC,EAAAC,cAAA,UAAKO,IAGnB,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACKK,GAELP,EAAAC,EAAAC,cAAA,UAAQ0C,QAAS/C,KAAKwB,SAAtB,sDAKGwB,EAAiBH,GAO5B,IANA,IAAII,EAAID,EAAkBH,EAEtBK,EADIC,KAAKC,MAAMJ,EAAkBH,GACfA,EAClBQ,EAAcJ,EAAIJ,EAElBS,EAAa,GACR3C,EAAIuC,EAAavC,EAAIuC,EAAcL,EAAKlC,IAC7C,IAAK,IAAIE,EAAIwC,EAAaxC,EAAIwC,EAAcR,EAAKhC,IAC7CyC,EAAWxC,KAAKd,KAAK2B,MAAME,eAAelB,GAAGE,IAGrD,OAAOyC,SAvEoB/C,IAAMC,WCQrB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAWC,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.41e6337d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/square.css\";\n\nexport default class Square extends React.Component {\n    render() {\n        const value = this.props.cellValue === 0 ? '' : this.props.cellValue;\n        return(\n            <button className=\"square\">\n                {value}\n            </button>\n        );\n    }\n}","import React from 'react'\nimport Square from './Square'\n\nexport default class House extends React.Component {\n    render() {\n        let rows = [];\n        for(var i=0;i<3;i++) {\n            let currentRow = [];\n            for(var j=0;j<3;j++) {\n                currentRow.push(<Square cellValue={this.props.houseValues[i*3+j]} />);\n            }\n            rows.push(<div>{currentRow}</div>);\n        }\n        return (rows);\n    }\n}","import React from \"react\"\nimport House from './House'\nimport axios from 'axios'\n\nexport default class Board extends React.Component {\n    async getData() {\n        var unfilledSudoku;\n        var solvedSudoku;\n        axios.get('http://localhost:8081/sudoku')\n            .then((response) => {\n                unfilledSudoku = response.data.grid;\n                solvedSudoku = response.data.cachedSolvedGrid;\n                this.setState(\n                    {\n                        loading: false,\n                        unfilledSudoku: unfilledSudoku,\n                        solvedSudoku: solvedSudoku\n                    }\n                );\n            })\n            .catch( (error) => {\n                console.log(error);\n            });\n    }\n\n    constructor(props) {\n        super(props);\n        this.getData = this.getData.bind(this);\n        this.getData();\n        this.state = {\n            loading: true,\n            unfilledSudoku: [[]],\n            solvedSudoku: [[]]\n        };\n    }\n\n    render() {\n        if(this.state.loading) {\n            return 'Loading!';\n        }\n        var rows = [];\n        for(var i=0;i<3;i++) {\n            let currentRow = [];\n            for(var j=0;j<3;j++) {\n                currentRow.push(\n                    <td>\n                        <House dim={9} houseValues={this.getHouseValues(i*3+j, 3)} />\n                    </td>\n                );\n            }\n            rows.push(<tr>{currentRow}</tr>)\n        }\n\n        return(\n            <div>\n                <table>\n                    {rows}\n                </table>\n                <button onClick={this.getData}>New Puzzle</button>\n            </div>\n        );\n    }\n\n    getHouseValues(innerGridNumber, dim) {\n        var Y = innerGridNumber % dim;\n        var X = Math.floor(innerGridNumber / dim);\n        var startXIndex = X * dim;\n        var startYIndex = Y * dim;\n\n        var resultList = [];\n        for (var i = startXIndex; i < startXIndex + dim; i++) {\n            for (var j = startYIndex; j < startYIndex + dim; j++) {\n                resultList.push(this.state.unfilledSudoku[i][j]);\n            }\n        }\n        return resultList;\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './components/Board'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}